@page
@model IndexModel
@{
    ViewData["Title"] = "Home Page";
}

<h1>Customer List</h1>

<table id="customers">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Phone</th>
            <th></th>
        </tr>
    </thead>
    <tbody>

    </tbody>
</table>

<form id="customerForm">
    <input type="hidden" id="customerId" value="" />
    <input type="text" id="firstName" placeholder="First Name" required />
    <input type="text" id="lastName" placeholder="Last Name" required />
    <input type="text" id="email" placeholder="Email" required />
    <input type="text" id="phone" placeholder="Phone" required />
    <button type="submit">Create Customer</button>
</form>

<script>
    document.addEventListener("DOMContentLoaded", async function () {
        await fetchCustomers();
        document.getElementById('customerForm').addEventListener('submit', async function (event) {
            event.preventDefault();
            const customerId = document.getElementById('customerId').value;
            const customerData = {
                firstName: document.getElementById('firstName').value,
                lastName: document.getElementById('lastName').value,
                email: document.getElementById('email').value,
                phone: document.getElementById('phone').value
            };

            if (customerId) {
                await updateCustomer(customerId, customerData);
            } else {
                await createCustomer(customerData);
            }
        });
    });

    async function createCustomer(customerData) {
        try {
            const response = await fetch('https://localhost:7074/Customer/create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(customerData)
            });

            if (!response.ok) {
                throw new Error('Failed to create customer');
            }

            await fetchCustomers();
            document.getElementById('customerForm').reset();
        } catch (error) {
            console.error('Failed to create customer:', error);
        }
    }

    async function updateCustomer(id, customerData) {
        try {
            const response = await fetch(`https://localhost:7074/Customer/Update/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(customerData)
            });

            if (!response.ok) {
                throw new Error('Failed to update customer');
            }

            await fetchCustomers();
            document.getElementById('customerForm').reset();
            document.getElementById('customerId').value = '';
        } catch (error) {
            console.error('Failed to update customer:', error);
        }
    }

    async function fetchCustomers() {
        try {
            const response = await fetch('https://localhost:7074/Customer/All');
            const data = await response.json();
            const tbody = document.getElementById('customers').getElementsByTagName('tbody')[0];
            tbody.innerHTML = '';
            data.forEach(customer => {
                const row = tbody.insertRow();
                row.insertCell(0).textContent = customer.firstName;
                row.insertCell(1).textContent = customer.lastName;
                row.insertCell(2).textContent = customer.email;
                row.insertCell(3).textContent = customer.phone;
                const actionsCell = row.insertCell(4);
                const editBtn = document.createElement('button');
                editBtn.textContent = 'Edit';
                editBtn.onclick = () => editCustomer(customer);
                const deleteBtn = document.createElement('button');
                deleteBtn.textContent = 'Delete';
                deleteBtn.onclick = () => confirmDelete(customer.id);
                actionsCell.appendChild(editBtn);
                actionsCell.appendChild(deleteBtn);
            });
        } catch (error) {
            console.error('Failed to fetch customers:', error);
        }
    }

    async function deleteCustomer(id) {
        try {
            const response = await fetch(`https://localhost:7074/Customer/Delete/${id}`, {
                method: 'DELETE'
            });
            if (!response.ok) {
                throw new Error('Failed to delete');
            }
            await fetchCustomers();
        } catch (error) {
            console.error('Failed to delete customer:', error);
        }
    }

    function editCustomer(customer) {
        document.getElementById('customerId').value = customer.id;
        document.getElementById('firstName').value = customer.firstName;
        document.getElementById('lastName').value = customer.lastName;
        document.getElementById('email').value = customer.email;
        document.getElementById('phone').value = customer.phone;
    }

    function confirmDelete(id) {
        if (confirm("Are you sure you want to delete this customer?")) {
            deleteCustomer(id);
        }
    }
    
</script>
